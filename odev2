#include <stdio.h>

#define MAX_ROW 100
#define MAX_COL 100

int matrix[MAX_ROW][MAX_COL];
int visited[MAX_ROW][MAX_COL];

int start_x, start_y, end_x, end_y;

int min_path = MAX_ROW * MAX_COL;  // en kısa yolun uzunluğu

void find_path(int x, int y, int path_length) {
    if (x == end_x && y == end_y) {  // bitiş noktasına ulaşıldı
        if (path_length < min_path) {
            min_path = path_length;
        }
        return;
    }

    visited[x][y] = 1;

    // dört yöne hareket et
    if (x - 1 >= 0 && matrix[x - 1][y] == 1 && !visited[x - 1][y]) {
        find_path(x - 1, y, path_length + 1);
    }
    if (x + 1 < MAX_ROW && matrix[x + 1][y] == 1 && !visited[x + 1][y]) {
        find_path(x + 1, y, path_length + 1);
    }
    if (y - 1 >= 0 && matrix[x][y - 1] == 1 && !visited[x][y - 1]) {
        find_path(x, y - 1, path_length + 1);
    }
    if (y + 1 < MAX_COL && matrix[x][y + 1] == 1 && !visited[x][y + 1]) {
        find_path(x, y + 1, path_length + 1);
    }

    visited[x][y] = 0;
}

int main() {
    int m, n;

    // matris boyutlarını al
    printf("Matris boyutunu girin (m x n): ");
    scanf("%d %d", &m, &n);

    // matrisi al
    printf("Matrisi girin (%d satır, %d sütun):\n", m, n);
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &matrix[i][j]);
        }
    }

    // başlangıç ve bitiş noktalar
